import pygame
import sys
import numpy
import random
import time


# import random for random move computer opponent


pygame.init()


WIDTH = 600
HEIGHT = 600

ROWS = 3
COLUMNS = 3

# tbh don't really like this colour
# idk if this is any better haha

BG_COLOUR = (0, 180, 200)
CIRCLE_COLOUR = (100, 20, 50)
LINE_COLOUR = (250, 250, 250)
BLACK = (0, 0, 0)
PLAYER_2_COLOUR = (0, 100, 200)
WIN_COLOUR = (80, 150, 200)

my_font = pygame.font.SysFont('Comic Sans MS', 20)
computer_win_text = my_font.render('Game over, you lose', False, BLACK)
player_win_text = my_font.render('Congratulations, you won! Want to play again?', False, BLACK)

screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Tic Tac Toe")
screen.fill(BG_COLOUR)

board = numpy.zeros((ROWS, COLUMNS))

player = 1
game_over = 0

coordinate_array = (100, 300, 500)


def mark_used(row, col):
    global player
    board[row][col] = player


def move_ok(row, col):
    return board[row][col] == 0


def is_room():
    for row in range(ROWS):
        for col in range(COLUMNS):
            if board[row][col] == 0:
                return True
    return False


def change_player():

    global player
    if player == 1:
        player = 2
    else:
        player = 1


def get_marking_coordinate(row, col):
    return coordinate_array[col], coordinate_array[row]


def someone_won():

    for row in range(0, 3):
        if board[row][0] == 0:
            continue
        if board[row][0] == board[row][1] == board[row][2]:

            # return the player
            pygame.draw.line(screen, WIN_COLOUR, (50, coordinate_array[row]), (550, coordinate_array[row]), width=10)
            return int(board[row][0])

    for col in range(0, 3):
        if board[0][col] == 0:
            continue
        if board[0][col] == board[1][col] == board[2][col]:

            # return the player
            pygame.draw.line(screen, WIN_COLOUR, (coordinate_array[col], 50), (coordinate_array[col], 550), width=10)
            return int(board[0][col])

    if board[0][0] != 0:
        if board[0][0] == board[1][1] == board[2][2]:
            pygame.draw.line(screen, WIN_COLOUR, (50, 50), (550, 550), 10)
            return int(board[0][0])
    if board[0][2] != 0:
        if board[0][2] == board[1][1] == board[2][0]:
            pygame.draw.line(screen, WIN_COLOUR, (50, 550), (550, 50), 10)
            return int(board[0][2])

    return 0


def update_board(y_coordinate, x_coordinate):

    global player

    row = int(y_coordinate//200)
    col = int(x_coordinate//200)

    # if square already used, return False

    if not move_ok(row, col):
        return False

    # mark square used

    mark_used(row, col)

    if player == 1:
        pygame.draw.circle(screen, BLACK, get_marking_coordinate(row, col), 50)

    else:
        pygame.draw.circle(screen, PLAYER_2_COLOUR, get_marking_coordinate(row, col), 50)

    change_player()

    # return True because update successful

    return True


def make_move(y_coordinate, x_coordinate):
    global game_over
    if not update_board(y_coordinate, x_coordinate):
        return False

    pygame.display.update()

    win = someone_won()

    if win in (1, 2):
        game_over = win
        return True

    time.sleep(1)

    # computer move

    while not update_board(random.randint(0, 599), random.randint(0, 599)):
        continue

    win = someone_won()

    if win in (1, 2):
        game_over = win
        return True

    return True


def draw_the_lines():

    # draw horizontal lines

    pygame.draw.line(screen, LINE_COLOUR, (0, 200), (600, 200), width=15)
    pygame.draw.line(screen, LINE_COLOUR, (0, 400), (600, 400), width=15)

    # draw vertical lines

    pygame.draw.line(screen, LINE_COLOUR, (200, 0), (200, 600), width=15)
    pygame.draw.line(screen, LINE_COLOUR, (400, 0), (400, 600), width=15)


draw_the_lines()


def restart():
    global player, game_over
    screen.fill(BG_COLOUR)
    for i in range(3):
        for j in range(3):
            board[i][j] = 0
    draw_the_lines()
    player = 1
    game_over = 0



while True:
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                position = pygame.mouse.get_pos()
                x_position = event.pos[0]
                y_position = event.pos[1]

                # made a separate function for updating board

                make_move(y_position, x_position)

                if game_over:
                    if game_over == 2:
                        screen.blit(computer_win_text, (0, 0))
                    elif game_over == 1:
                        screen.blit(player_win_text, (0, 0))
                    pygame.display.update()
                    time.sleep(1)
                    restart()
                    pygame.display.update()

                    break
                # for viewing the console board, can be deleted later

        pygame.display.update()
